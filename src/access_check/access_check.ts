// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: access_check/access_check.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccessCheckOperator, accessCheckOperatorFromJSON, accessCheckOperatorToJSON } from "./access_check_operator";

/**
 * An individual access check
 *
 * Individual access checks test a user for specific access, or can be a
 * nested chain.
 */
export interface AccessCheck {
  kind?: { $case: "chain"; value: AccessCheckChain } | { $case: "user"; value: string } | {
    $case: "role";
    value: string;
  } | undefined;
}

/**
 * A chain of acess checks
 *
 * Access Checks are used to determine if a user has access to a piece of
 * functionality. A chain of checks and nested chains can be used to represent
 * access logic.
 */
export interface AccessCheckChain {
  /**
   * The operator to use for this chain, i.e. AND/OR
   *
   * All access checks in this chain will be combined using this operator.
   */
  operator: AccessCheckOperator;
  /** A list of access checks to execute in this chain */
  checks: AccessCheck[];
}

function createBaseAccessCheck(): AccessCheck {
  return { kind: undefined };
}

export const AccessCheck: MessageFns<AccessCheck> = {
  encode(message: AccessCheck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.kind?.$case) {
      case "chain":
        AccessCheckChain.encode(message.kind.value, writer.uint32(10).fork()).join();
        break;
      case "user":
        writer.uint32(18).string(message.kind.value);
        break;
      case "role":
        writer.uint32(26).string(message.kind.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessCheck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessCheck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.kind = { $case: "chain", value: AccessCheckChain.decode(reader, reader.uint32()) };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.kind = { $case: "user", value: reader.string() };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.kind = { $case: "role", value: reader.string() };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessCheck {
    return {
      kind: isSet(object.chain)
        ? { $case: "chain", value: AccessCheckChain.fromJSON(object.chain) }
        : isSet(object.user)
        ? { $case: "user", value: globalThis.String(object.user) }
        : isSet(object.role)
        ? { $case: "role", value: globalThis.String(object.role) }
        : undefined,
    };
  },

  toJSON(message: AccessCheck): unknown {
    const obj: any = {};
    if (message.kind?.$case === "chain") {
      obj.chain = AccessCheckChain.toJSON(message.kind.value);
    }
    if (message.kind?.$case === "user") {
      obj.user = message.kind.value;
    }
    if (message.kind?.$case === "role") {
      obj.role = message.kind.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessCheck>, I>>(base?: I): AccessCheck {
    return AccessCheck.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessCheck>, I>>(object: I): AccessCheck {
    const message = createBaseAccessCheck();
    if (object.kind?.$case === "chain" && object.kind?.value !== undefined && object.kind?.value !== null) {
      message.kind = { $case: "chain", value: AccessCheckChain.fromPartial(object.kind.value) };
    }
    if (object.kind?.$case === "user" && object.kind?.value !== undefined && object.kind?.value !== null) {
      message.kind = { $case: "user", value: object.kind.value };
    }
    if (object.kind?.$case === "role" && object.kind?.value !== undefined && object.kind?.value !== null) {
      message.kind = { $case: "role", value: object.kind.value };
    }
    return message;
  },
};

function createBaseAccessCheckChain(): AccessCheckChain {
  return { operator: 0, checks: [] };
}

export const AccessCheckChain: MessageFns<AccessCheckChain> = {
  encode(message: AccessCheckChain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== 0) {
      writer.uint32(8).int32(message.operator);
    }
    for (const v of message.checks) {
      AccessCheck.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessCheckChain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessCheckChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.operator = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.checks.push(AccessCheck.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessCheckChain {
    return {
      operator: isSet(object.operator) ? accessCheckOperatorFromJSON(object.operator) : 0,
      checks: globalThis.Array.isArray(object?.checks) ? object.checks.map((e: any) => AccessCheck.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccessCheckChain): unknown {
    const obj: any = {};
    if (message.operator !== 0) {
      obj.operator = accessCheckOperatorToJSON(message.operator);
    }
    if (message.checks?.length) {
      obj.checks = message.checks.map((e) => AccessCheck.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessCheckChain>, I>>(base?: I): AccessCheckChain {
    return AccessCheckChain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccessCheckChain>, I>>(object: I): AccessCheckChain {
    const message = createBaseAccessCheckChain();
    message.operator = object.operator ?? 0;
    message.checks = object.checks?.map((e) => AccessCheck.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
