// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: plugin/command_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CommandContextArgument } from "./command_context_argument";

/** Plugin command context. */
export interface CommandContext {
  /** The name of the command. */
  name: string;
  /** Arguments passed to the command. */
  arguments: CommandContextArgument[];
  /** Optional nested subcommand context. */
  subcommand?: CommandContext | undefined;
}

function createBaseCommandContext(): CommandContext {
  return { name: "", arguments: [], subcommand: undefined };
}

export const CommandContext: MessageFns<CommandContext> = {
  encode(message: CommandContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.arguments) {
      CommandContextArgument.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.subcommand !== undefined) {
      CommandContext.encode(message.subcommand, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.arguments.push(CommandContextArgument.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subcommand = CommandContext.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandContext {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      arguments: globalThis.Array.isArray(object?.arguments)
        ? object.arguments.map((e: any) => CommandContextArgument.fromJSON(e))
        : [],
      subcommand: isSet(object.subcommand) ? CommandContext.fromJSON(object.subcommand) : undefined,
    };
  },

  toJSON(message: CommandContext): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.arguments?.length) {
      obj.arguments = message.arguments.map((e) => CommandContextArgument.toJSON(e));
    }
    if (message.subcommand !== undefined) {
      obj.subcommand = CommandContext.toJSON(message.subcommand);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandContext>, I>>(base?: I): CommandContext {
    return CommandContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandContext>, I>>(object: I): CommandContext {
    const message = createBaseCommandContext();
    message.name = object.name ?? "";
    message.arguments = object.arguments?.map((e) => CommandContextArgument.fromPartial(e)) || [];
    message.subcommand = (object.subcommand !== undefined && object.subcommand !== null)
      ? CommandContext.fromPartial(object.subcommand)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
