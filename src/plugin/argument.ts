// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: plugin/argument.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

/** Arguments for a plugin or a plugins subcommands. */
export interface Argument {
  /** Argument name. */
  name: string;
  /** Argument description. */
  description: string;
  /** Optional argument default value. */
  defaultValue?:
    | string
    | undefined;
  /** Whether or not this argument is required. */
  required: boolean;
  /** Sets the short version of the argument without the preceding -. */
  short?:
    | string
    | undefined;
  /** Sets the long version of the argument without the preceding --. */
  long?: string | undefined;
}

function createBaseArgument(): Argument {
  return { name: "", description: "", defaultValue: undefined, required: false, short: undefined, long: undefined };
}

export const Argument: MessageFns<Argument> = {
  encode(message: Argument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.defaultValue !== undefined) {
      writer.uint32(26).string(message.defaultValue);
    }
    if (message.required !== false) {
      writer.uint32(32).bool(message.required);
    }
    if (message.short !== undefined) {
      writer.uint32(42).string(message.short);
    }
    if (message.long !== undefined) {
      writer.uint32(50).string(message.long);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Argument {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArgument();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultValue = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.required = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.short = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.long = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Argument {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      defaultValue: isSet(object.defaultValue) ? globalThis.String(object.defaultValue) : undefined,
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      short: isSet(object.short) ? globalThis.String(object.short) : undefined,
      long: isSet(object.long) ? globalThis.String(object.long) : undefined,
    };
  },

  toJSON(message: Argument): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.defaultValue !== undefined) {
      obj.defaultValue = message.defaultValue;
    }
    if (message.required !== false) {
      obj.required = message.required;
    }
    if (message.short !== undefined) {
      obj.short = message.short;
    }
    if (message.long !== undefined) {
      obj.long = message.long;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Argument>, I>>(base?: I): Argument {
    return Argument.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Argument>, I>>(object: I): Argument {
    const message = createBaseArgument();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.defaultValue = object.defaultValue ?? undefined;
    message.required = object.required ?? false;
    message.short = object.short ?? undefined;
    message.long = object.long ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
