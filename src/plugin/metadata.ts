// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: plugin/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccessCheckChain } from "../access_check/access_check";
import { EscalatedPrivilege, escalatedPrivilegeFromJSON, escalatedPrivilegeToJSON } from "./escalated_privilege";

/** Metadata for a plugin. */
export interface Metadata {
  /** The plguins name. */
  name: string;
  /** A short description of the plugin. */
  description: string;
  /**
   * A version string for the plugin. Should follow semver.
   *
   * @see: https://semver.org/
   */
  version: string;
  /**
   * When true, a SQLite3 database will be created for the plugin.
   * @deprecated All plugins get a database by default now.
   */
  database: boolean;
  /**
   * Access checks
   *
   * All functionality of this plugin can optionally be gated by accses checks.
   */
  accessChecks:
    | AccessCheckChain
    | undefined;
  /**
   * A secret escalation key that grants this plugin specific escalated
   * privileges.
   */
  escalationKey: string;
  /** A list of escalated privileges that this plugin requests to use. */
  escalatedPrivileges: EscalatedPrivilege[];
}

function createBaseMetadata(): Metadata {
  return {
    name: "",
    description: "",
    version: "",
    database: false,
    accessChecks: undefined,
    escalationKey: "",
    escalatedPrivileges: [],
  };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.database !== false) {
      writer.uint32(32).bool(message.database);
    }
    if (message.accessChecks !== undefined) {
      AccessCheckChain.encode(message.accessChecks, writer.uint32(42).fork()).join();
    }
    if (message.escalationKey !== "") {
      writer.uint32(50).string(message.escalationKey);
    }
    writer.uint32(58).fork();
    for (const v of message.escalatedPrivileges) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.database = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.accessChecks = AccessCheckChain.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.escalationKey = reader.string();
          continue;
        case 7:
          if (tag === 56) {
            message.escalatedPrivileges.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.escalatedPrivileges.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      database: isSet(object.database) ? globalThis.Boolean(object.database) : false,
      accessChecks: isSet(object.accessChecks) ? AccessCheckChain.fromJSON(object.accessChecks) : undefined,
      escalationKey: isSet(object.escalationKey) ? globalThis.String(object.escalationKey) : "",
      escalatedPrivileges: globalThis.Array.isArray(object?.escalatedPrivileges)
        ? object.escalatedPrivileges.map((e: any) => escalatedPrivilegeFromJSON(e))
        : [],
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.database !== false) {
      obj.database = message.database;
    }
    if (message.accessChecks !== undefined) {
      obj.accessChecks = AccessCheckChain.toJSON(message.accessChecks);
    }
    if (message.escalationKey !== "") {
      obj.escalationKey = message.escalationKey;
    }
    if (message.escalatedPrivileges?.length) {
      obj.escalatedPrivileges = message.escalatedPrivileges.map((e) => escalatedPrivilegeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.version = object.version ?? "";
    message.database = object.database ?? false;
    message.accessChecks = (object.accessChecks !== undefined && object.accessChecks !== null)
      ? AccessCheckChain.fromPartial(object.accessChecks)
      : undefined;
    message.escalationKey = object.escalationKey ?? "";
    message.escalatedPrivileges = object.escalatedPrivileges?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
