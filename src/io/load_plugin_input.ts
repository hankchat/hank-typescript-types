// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: io/load_plugin_input.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

/** [Internal] Input to a load plugin request to Hank. */
export interface LoadPluginInput {
  wasm?:
    | { $case: "url"; value: string }
    | { $case: "path"; value: string }
    | { $case: "bytes"; value: Buffer }
    | undefined;
}

function createBaseLoadPluginInput(): LoadPluginInput {
  return { wasm: undefined };
}

export const LoadPluginInput: MessageFns<LoadPluginInput> = {
  encode(message: LoadPluginInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.wasm?.$case) {
      case "url":
        writer.uint32(10).string(message.wasm.value);
        break;
      case "path":
        writer.uint32(18).string(message.wasm.value);
        break;
      case "bytes":
        writer.uint32(26).bytes(message.wasm.value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoadPluginInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoadPluginInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wasm = { $case: "url", value: reader.string() };
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.wasm = { $case: "path", value: reader.string() };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.wasm = { $case: "bytes", value: Buffer.from(reader.bytes()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoadPluginInput {
    return {
      wasm: isSet(object.url)
        ? { $case: "url", value: globalThis.String(object.url) }
        : isSet(object.path)
        ? { $case: "path", value: globalThis.String(object.path) }
        : isSet(object.bytes)
        ? { $case: "bytes", value: Buffer.from(bytesFromBase64(object.bytes)) }
        : undefined,
    };
  },

  toJSON(message: LoadPluginInput): unknown {
    const obj: any = {};
    if (message.wasm?.$case === "url") {
      obj.url = message.wasm.value;
    }
    if (message.wasm?.$case === "path") {
      obj.path = message.wasm.value;
    }
    if (message.wasm?.$case === "bytes") {
      obj.bytes = base64FromBytes(message.wasm.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoadPluginInput>, I>>(base?: I): LoadPluginInput {
    return LoadPluginInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoadPluginInput>, I>>(object: I): LoadPluginInput {
    const message = createBaseLoadPluginInput();
    if (object.wasm?.$case === "url" && object.wasm?.value !== undefined && object.wasm?.value !== null) {
      message.wasm = { $case: "url", value: object.wasm.value };
    }
    if (object.wasm?.$case === "path" && object.wasm?.value !== undefined && object.wasm?.value !== null) {
      message.wasm = { $case: "path", value: object.wasm.value };
    }
    if (object.wasm?.$case === "bytes" && object.wasm?.value !== undefined && object.wasm?.value !== null) {
      message.wasm = { $case: "bytes", value: object.wasm.value };
    }
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
