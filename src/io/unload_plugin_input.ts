// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: io/unload_plugin_input.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

/** [Internal] Input to an unload plugin request to Hank. */
export interface UnloadPluginInput {
  /** The plugin to unload. */
  plugin: string;
  /**
   * Whether or not hank should clean up any plugin assets, e.g. database file.
   * This should be set to true if this plugin is being unloaded as a result
   * of an uninstall command.
   */
  cleanup: boolean;
}

function createBaseUnloadPluginInput(): UnloadPluginInput {
  return { plugin: "", cleanup: false };
}

export const UnloadPluginInput: MessageFns<UnloadPluginInput> = {
  encode(message: UnloadPluginInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.plugin !== "") {
      writer.uint32(10).string(message.plugin);
    }
    if (message.cleanup !== false) {
      writer.uint32(16).bool(message.cleanup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnloadPluginInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnloadPluginInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plugin = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.cleanup = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnloadPluginInput {
    return {
      plugin: isSet(object.plugin) ? globalThis.String(object.plugin) : "",
      cleanup: isSet(object.cleanup) ? globalThis.Boolean(object.cleanup) : false,
    };
  },

  toJSON(message: UnloadPluginInput): unknown {
    const obj: any = {};
    if (message.plugin !== "") {
      obj.plugin = message.plugin;
    }
    if (message.cleanup !== false) {
      obj.cleanup = message.cleanup;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnloadPluginInput>, I>>(base?: I): UnloadPluginInput {
    return UnloadPluginInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnloadPluginInput>, I>>(object: I): UnloadPluginInput {
    const message = createBaseUnloadPluginInput();
    message.plugin = object.plugin ?? "";
    message.cleanup = object.cleanup ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
