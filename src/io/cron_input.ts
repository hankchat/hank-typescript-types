// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: io/cron_input.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CronJob } from "../cron/cron_job";

/** [Internal] Input to a cron request to Hank. */
export interface CronInput {
  /** A cronjob to send to Hank. */
  cronJob: CronJob | undefined;
}

function createBaseCronInput(): CronInput {
  return { cronJob: undefined };
}

export const CronInput: MessageFns<CronInput> = {
  encode(message: CronInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cronJob !== undefined) {
      CronJob.encode(message.cronJob, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CronInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCronInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cronJob = CronJob.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CronInput {
    return { cronJob: isSet(object.cronJob) ? CronJob.fromJSON(object.cronJob) : undefined };
  },

  toJSON(message: CronInput): unknown {
    const obj: any = {};
    if (message.cronJob !== undefined) {
      obj.cronJob = CronJob.toJSON(message.cronJob);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CronInput>, I>>(base?: I): CronInput {
    return CronInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CronInput>, I>>(object: I): CronInput {
    const message = createBaseCronInput();
    message.cronJob = (object.cronJob !== undefined && object.cronJob !== null)
      ? CronJob.fromPartial(object.cronJob)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
